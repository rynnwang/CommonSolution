//////////////////////////////
// This code is generated by Beyova.common.RestApiClientGenerator.
// UTC: 2016-02-20 16:05:59.432
//////////////////////////////
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Text;
using Beyova.ProgrammingIntelligence;
using Beyova.ExceptionSystem;
using Beyova;
using Beyova.RestApi;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Beyova.CommonAdminService
{
    public class CommonServiceRestClient : Beyova.RestApi.RestApiClient
    {
        public CommonServiceRestClient(ApiEndpoint endpoint, bool enableExceptionRestore = false) : base(endpoint, enableExceptionRestore)
        {
        }

        public virtual TAuthenticationResult Authenticate<TAuthenticationResult>(Beyova.AuthenticationRequest request)
        {
            try
            {
                return this.InvokeUsingBody("PUT", "Token", null, request).Value<TAuthenticationResult>();
            }
            catch (Exception ex)
            {
                throw ex.Handle("Authenticate", new { request });
            }
        }

        public virtual void Logout(System.String token)
        {
            try
            {
                this.InvokeUsingQueryString("DELETE", "Token", null, token.ToString());
            }
            catch (Exception ex)
            {
                throw ex.Handle("Logout", new { token });
            }
        }

        public virtual TUserInfo GetUserInfoByToken<TUserInfo>(System.String token)
        {
            try
            {
                return this.InvokeUsingQueryString("GET", "Token", null, token.ToString()).Value<TUserInfo>();
            }
            catch (Exception ex)
            {
                throw ex.Handle("GetUserInfoByToken", new { token });
            }
        }

        public virtual TAuthenticationResult RenewToken<TAuthenticationResult>(System.String token)
        {
            try
            {
                return this.InvokeUsingQueryString("POST", "Token", null, token.ToString()).Value<TAuthenticationResult>();
            }
            catch (Exception ex)
            {
                throw ex.Handle("RenewToken", new { token });
            }
        }

        public virtual Beyova.SessionInfo GetSessionInfoByToken(System.String token)
        {
            try
            {
                return this.InvokeUsingQueryString("GET", "SessionInfo", null, token.ToString()).Value<Beyova.SessionInfo>();
            }
            catch (Exception ex)
            {
                throw ex.Handle("GetSessionInfoByToken", new { token });
            }
        }

        public virtual System.Collections.Generic.List<Beyova.SessionInfo> QuerySessionInfo(Beyova.SessionCriteria criteria)
        {
            try
            {
                return this.InvokeUsingBody("POST", "SessionInfo", null, criteria).Value<System.Collections.Generic.List<Beyova.SessionInfo>>();
            }
            catch (Exception ex)
            {
                throw ex.Handle("QuerySessionInfo", new { criteria });
            }
        }

        public virtual System.Collections.Generic.List<TUserInfo> QueryUserInfo<TUserInfo, TUserCriteria>(TUserCriteria criteria)
        {
            try
            {
                return this.InvokeUsingBody("POST", "UserInfo", null, criteria).Value<System.Collections.Generic.List<TUserInfo>>();
            }
            catch (Exception ex)
            {
                throw ex.Handle("QueryUserInfo", new { criteria });
            }
        }

        public virtual TUserInfo GetUserInfoByUserKey<TUserInfo>(System.Nullable<System.Guid> userKey)
        {
            try
            {
                return this.InvokeUsingQueryString("GET", "UserInfo", null, userKey == null ? null : userKey.ToString()).Value<TUserInfo>();
            }
            catch (Exception ex)
            {
                throw ex.Handle("GetUserInfoByUserKey", new { userKey });
            }
        }

    }
}


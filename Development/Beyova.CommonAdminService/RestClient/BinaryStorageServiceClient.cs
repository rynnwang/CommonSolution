//////////////////////////////
// This code is generated by Beyova.common.RestApiClientGenerator.
// UTC: 2016-05-25 12:57:58.033
//////////////////////////////
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Text;
using Beyova.ProgrammingIntelligence;
using Beyova.ExceptionSystem;
using Beyova;
using Beyova.RestApi;
using Beyova.Api;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Beyova.CommonAdminService
{
    /// <summary>
    /// Class BinaryStorageServiceClient.
    /// </summary>
    /// <typeparam name="TBinaryStorageObject">The type of the t binary storage object.</typeparam>
    /// <typeparam name="TBinaryStorageCriteria">The type of the t binary storage criteria.</typeparam>
    public class BinaryStorageServiceClient<TBinaryStorageObject, TBinaryStorageCriteria> : Beyova.RestApi.RestApiClient
        , Beyova.CommonServiceInterface.IBinaryStorageService<TBinaryStorageObject, TBinaryStorageCriteria>

            where TBinaryStorageObject : Beyova.BinaryStorageMetaData
            where TBinaryStorageCriteria : Beyova.BinaryStorageMetaDataCriteria
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="T:Beyova.RestApi.RestApiClient" /> class.
        /// </summary>
        /// <param name="endpoint">The endpoint.</param>
        /// <param name="acceptGZip">if set to <c>true</c> [accept g zip].</param>
        public BinaryStorageServiceClient(ApiEndpoint endpoint, bool acceptGZip = false) : base(endpoint, acceptGZip)
        {
        }

        /// <summary>
        /// Requests the binary upload credential.
        /// </summary>
        /// <param name="meteData">The mete data.</param>
        /// <returns>BinaryStorageActionCredential.</returns>
        public virtual Beyova.BinaryStorageActionCredential RequestBinaryUploadCredential(TBinaryStorageObject meteData)
        {
            try
            {
                return this.InvokeUsingBody("POST", "BinaryStorageCredential", "Upload", meteData).ToObject<Beyova.BinaryStorageActionCredential>();
            }
            catch (Exception ex)
            {
                throw ex.Handle(new { meteData });
            }
        }

        /// <summary>
        /// Requests the binary download credential.
        /// </summary>
        /// <param name="identifier">The identifier.</param>
        /// <returns>BinaryStorageActionCredential.</returns>
        public virtual Beyova.BinaryStorageActionCredential RequestBinaryDownloadCredential(Beyova.BinaryStorageIdentifier identifier)
        {
            try
            {
                return this.InvokeUsingBody("POST", "BinaryStorageCredential", "Download", identifier).ToObject<Beyova.BinaryStorageActionCredential>();
            }
            catch (Exception ex)
            {
                throw ex.Handle(new { identifier });
            }
        }

        /// <summary>
        /// Queries the binary storage. (User based)
        /// </summary>
        /// <param name="criteria">The criteria.</param>
        /// <returns>List&lt;TBinaryStorageObject&gt;.</returns>
        public virtual System.Collections.Generic.List<TBinaryStorageObject> QueryUserBinaryStorage(TBinaryStorageCriteria criteria)
        {
            try
            {
                return this.InvokeUsingBody("POST", "BinaryStorage", "User", criteria).ToObject<System.Collections.Generic.List<TBinaryStorageObject>>();
            }
            catch (Exception ex)
            {
                throw ex.Handle(new { criteria });
            }
        }

        /// <summary>
        /// Queries the binary storage.
        /// </summary>
        /// <param name="criteria">The criteria.</param>
        /// <returns>List&lt;TBinaryStorageObject&gt;.</returns>
        public virtual System.Collections.Generic.List<TBinaryStorageObject> QueryBinaryStorage(TBinaryStorageCriteria criteria)
        {
            try
            {
                return this.InvokeUsingBody("POST", "BinaryStorage", null, criteria).ToObject<System.Collections.Generic.List<TBinaryStorageObject>>();
            }
            catch (Exception ex)
            {
                throw ex.Handle(new { criteria });
            }
        }

        /// <summary>
        /// Gets the binary storage by key.
        /// </summary>
        /// <param name="key">The key.</param>
        /// <returns>TBinaryStorageObject.</returns>
        public virtual TBinaryStorageObject GetBinaryStorageByKey(System.String key)
        {
            try
            {
                return this.InvokeUsingQueryString("GET", "BinaryStorage", null, key.ToString()).ToObject<TBinaryStorageObject>();
            }
            catch (Exception ex)
            {
                throw ex.Handle(new { key });
            }
        }

        /// <summary>
        /// Gets the binary storage by keys.
        /// </summary>
        /// <param name="keys">The keys.</param>
        /// <returns>List&lt;TBinaryStorageObject&gt;.</returns>
        public virtual System.Collections.Generic.List<TBinaryStorageObject> GetBinaryStorageByKeys(System.Collections.Generic.List<System.String> keys)
        {
            try
            {
                return this.InvokeUsingBody("POST", "BinaryStorage", "GetByBatch", keys).ToObject<System.Collections.Generic.List<TBinaryStorageObject>>();
            }
            catch (Exception ex)
            {
                throw ex.Handle(new { keys });
            }
        }

        /// <summary>
        /// Commits the binary storage.
        /// </summary>
        /// <param name="request">The request.</param>
        /// <returns>BinaryStorageIdentifier.</returns>
        public virtual TBinaryStorageObject CommitBinaryStorage(Beyova.BinaryStorageCommitRequest request)
        {
            try
            {
                return this.InvokeUsingBody("PUT", "BinaryStorage", null, request).ToObject<TBinaryStorageObject>();
            }
            catch (Exception ex)
            {
                throw ex.Handle(new { request });
            }
        }

        /// <summary>
        /// Deletes the binary storage.
        /// </summary>
        /// <param name="identifier">The identifier.</param>
        public virtual void DeleteBinaryStorage(System.String identifier)
        {
            try
            {
                this.InvokeUsingQueryString("DELETE", "BinaryStorage", null, identifier.ToString());
            }
            catch (Exception ex)
            {
                throw ex.Handle(new { identifier });
            }
        }

    }
}

